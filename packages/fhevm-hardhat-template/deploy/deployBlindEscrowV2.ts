import { ethers } from "hardhat";
import { writeFileSync } from "fs";
import { join } from "path";

async function main() {
  console.log("Deploying BlindEscrowV2...");

  // Get the contract factory
  const BlindEscrowV2 = await ethers.getContractFactory("BlindEscrowV2");

  // Deploy the contract
  const blindEscrow = await BlindEscrowV2.deploy();
  await blindEscrow.waitForDeployment();

  const contractAddress = await blindEscrow.getAddress();
  console.log(`BlindEscrowV2 deployed to: ${contractAddress}`);

  // Get the contract ABI
  const contractInterface = BlindEscrowV2.interface;
  const abi = contractInterface.format("json");
  
  // Create output directory if it doesn't exist
  const outputDir = join(__dirname, "../abi");
  
  // Write ABI to JSON file
  const abiPath = join(outputDir, "BlindEscrowV2ABI.json");
  writeFileSync(abiPath, abi);
  console.log(`ABI written to: ${abiPath}`);

  // Write contract address
  const addressPath = join(outputDir, "BlindEscrowV2Addresses.ts");
  const addressContent = `// Auto-generated by deploy script
export const BlindEscrowV2Addresses = {
  localhost: "${contractAddress}",
  hardhat: "${contractAddress}",
  sepolia: "${contractAddress}", // Update with actual deployed address
} as const;

export type BlindEscrowV2Network = keyof typeof BlindEscrowV2Addresses;
`;
  writeFileSync(addressPath, addressContent);
  console.log(`Addresses written to: ${addressPath}`);

  // Verify deployment
  const version = await blindEscrow.version();
  console.log(`Contract version: ${version}`);

  console.log("Deployment completed successfully!");
  console.log("\nNext steps:");
  console.log("1. Copy the contract address to your .env file:");
  console.log(`   NEXT_PUBLIC_CONTRACT_ADDRESS=${contractAddress}`);
  console.log("2. Update the contract address in your frontend configuration");
  console.log("3. Test the contract functionality");
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
